name: 'Setup K3s Kubernetes'
description: 'Install K3s Kubernetes distribution'
inputs:
  extra-params:
    description: 'Extra parameters to pass to k3s installer'
    required: false
    default: ''
runs:
  using: 'composite'
  steps:
    - name: Free up disk space
      shell: bash
      run: |
        echo "üßπ Removing unnecessary directories to free up disk space..."
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/lib/jvm
        sudo rm -rf /usr/share/swift
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/julia*
        sudo rm -rf /opt/az
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /opt/microsoft
        sudo rm -rf /opt/google
        sudo rm -rf /usr/lib/firefox
        echo "‚úÖ Disk space freed up"
        df -h / | grep -v Filesystem

    - name: Install K3s
      shell: bash
      run: |
        echo "üì¶ Installing K3s..."
        curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644 ${{ inputs.extra-params }}
        
        echo "‚è≥ Waiting for K3s to be ready..."
        sleep 120
    
    - name: Setup kubectl
      shell: bash
      run: |
        echo "üîß Setting up kubectl..."
        
        # Download the kubectl binary into /usr/bin and remove /usr/local/bin/kubectl
        # We need to do this to avoid hitting issues like:
        # error: open /etc/rancher/k3s/k3s.yaml.lock: permission denied
        # Which happens because k3s links `/usr/local/bin/kubectl` to `/usr/local/bin/k3s`,
        # and that does extra stuff that vanilla `kubectl` doesn't do.
        
        ARCH=$(uname -m)
        case "${ARCH}" in
          x86_64) ARCH="amd64" ;;
          aarch64) ARCH="arm64" ;;
        esac
        
        kubectl_version=$(/usr/local/bin/k3s kubectl version --client=true 2>/dev/null | grep "Client Version" | sed -e 's/Client Version: //' -e 's/+k3s[0-9]\+//')
        sudo curl -fL --progress-bar -o /usr/bin/kubectl https://dl.k8s.io/release/"${kubectl_version}"/bin/linux/"${ARCH}"/kubectl
        sudo chmod +x /usr/bin/kubectl
        sudo rm -rf /usr/local/bin/kubectl
        
        mkdir -p ~/.kube
        cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
        
        echo "‚úÖ kubectl installed: $(kubectl version --client)"
    
    - name: Verify cluster
      shell: bash
      run: |
        echo "üîç Verifying K3s cluster..."
        kubectl get nodes
        kubectl get pods -A
        
        # Wait for system pods to be ready (excluding completed/job pods)
        echo "‚è≥ Waiting for system pods..."
        # Wait only for Running pods (not Completed/Job pods)
        kubectl wait --for=condition=Ready pods --all -n kube-system --timeout=5m \
          --field-selector=status.phase!=Succeeded,status.phase!=Failed || true
        
        # Verify all pods are either Running or Completed
        NOT_READY=$(kubectl get pods -n kube-system -o json | \
          jq -r '.items[] | select(.status.phase != "Running" and .status.phase != "Succeeded") | .metadata.name')
        
        if [ -n "$NOT_READY" ]; then
          echo "‚ùå Some pods are not ready:"
          echo "$NOT_READY"
          kubectl get pods -A
          exit 1
        fi
        
        echo "‚úÖ K3s cluster is ready!"
