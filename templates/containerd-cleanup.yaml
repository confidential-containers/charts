{{- if .Values.customContainerd.enabled }}
{{- $k8sDistribution := (index .Values "kata-as-coco-runtime").k8sDistribution | default "k8s" }}
{{- if eq $k8sDistribution "k8s" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "confidential-containers.fullname" . }}-containerd-cleanup
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "confidential-containers.labels" . | nindent 4 }}
    app.kubernetes.io/component: containerd-cleanup
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-weight: "5"
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "confidential-containers.name" . }}-containerd-cleanup
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: containerd-cleanup
    spec:
      hostNetwork: true
      hostPID: true
      restartPolicy: OnFailure
      {{- with .Values.customContainerd.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.customContainerd.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: containerd-cleanup
        image: {{ .Values.customContainerd.image.repository }}:{{ .Values.customContainerd.image.tag }}
        imagePullPolicy: {{ .Values.customContainerd.image.pullPolicy | default "IfNotPresent" }}
        command:
        - /bin/sh
        - -c
        - |
          set -euo pipefail
          
          echo "🧹 Custom Containerd Cleanup"
          echo "============================"
          
          # Detect containerd installation path (same logic as installer)
          echo "🔍 Detecting containerd installation path..."
          CONTAINERD_BIN=$(nsenter --target 1 --mount which containerd 2>/dev/null || echo "")
          if [ -z "${CONTAINERD_BIN}" ]; then
            echo "❌ Could not find containerd in PATH"
            exit 1
          fi
          # Get the directory (e.g., /usr/bin/containerd -> /usr)
          BIN_DIR=$(dirname "${CONTAINERD_BIN}")
          INSTALL_PATH=$(dirname "${BIN_DIR}")
          echo "   Detected: ${INSTALL_PATH} (containerd at ${CONTAINERD_BIN})"
          
          MARKER_FILE="/host${INSTALL_PATH}/.containerd-installer-complete"
          BACKUP_DIR="/host${INSTALL_PATH}/.containerd-backup"
          INSTALL_BIN_DIR="/host${INSTALL_PATH}/bin"
          
          # Check if custom containerd was installed
          if [ ! -f "${MARKER_FILE}" ]; then
            echo "ℹ️  No custom containerd installation found (marker file missing)"
            echo "   Nothing to clean up"
            exit 0
          fi
          
          echo "✅ Found installation marker at ${MARKER_FILE#/host}"
          
          # Check for backup
          
          if [ ! -d "${BACKUP_DIR}" ] || [ ! "$(ls -A ${BACKUP_DIR} 2>/dev/null)" ]; then
            echo "⚠️  No backup found at ${BACKUP_DIR#/host}"
            echo "   Cannot restore - manual intervention required"
            rm -f "${MARKER_FILE}"
            exit 1
          fi
          
          echo "✅ Found backup at ${BACKUP_DIR#/host}"
          
          echo "♻️  Restoring original containerd binaries..."
          for binary in "${BACKUP_DIR}"/*; do
            [ -f "${binary}" ] && cp -p "${binary}" "${INSTALL_BIN_DIR}/"
          done
          
          # Restart containerd using nsenter
          echo "🔄 Restarting containerd..."
          nsenter --target 1 --mount systemctl daemon-reload
          nsenter --target 1 --mount systemctl restart containerd
          
          # Wait for containerd to be ready with retry
          echo "⏳ Waiting for containerd to be active..."
          TIMEOUT=30
          ELAPSED=0
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if nsenter --target 1 --mount systemctl is-active containerd >/dev/null 2>&1; then
              echo "✅ containerd is active (after ${ELAPSED}s)"
              break
            fi
            sleep 3
            ELAPSED=$((ELAPSED + 3))
          done
          
          if ! nsenter --target 1 --mount systemctl is-active containerd >/dev/null 2>&1; then
            echo "❌ containerd failed to start after ${TIMEOUT}s"
            nsenter --target 1 --mount systemctl status containerd || true
            exit 1
          fi
          
          # Restart kubelet to pick up the restored containerd/shims
          echo "🔄 Restarting kubelet..."
          nsenter --target 1 --mount systemctl restart kubelet || {
            echo "⚠️  Failed to restart kubelet"
          }
          
          # Wait for kubelet to be ready
          echo "⏳ Waiting for kubelet to be active..."
          TIMEOUT=30
          ELAPSED=0
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if nsenter --target 1 --mount systemctl is-active kubelet >/dev/null 2>&1; then
              echo "✅ kubelet is active (after ${ELAPSED}s)"
              break
            fi
            sleep 3
            ELAPSED=$((ELAPSED + 3))
          done
          
          # Get and display version
          CONTAINERD_VERSION=$(nsenter --target 1 --mount ${INSTALL_PATH}/bin/containerd --version 2>/dev/null | head -1 || echo "unknown")
          
          # Cleanup backup and marker
          rm -rf "${BACKUP_DIR}"
          rm -f "${MARKER_FILE}"
          
          echo "✅ Cleanup complete!"
          echo "   ${CONTAINERD_VERSION}"
        securityContext:
          privileged: true
        volumeMounts:
        - name: host-root
          mountPath: /host
        env:
        - name: PATH
          value: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      volumes:
      - name: host-root
        hostPath:
          path: /
          type: Directory
{{- end }}
{{- end }}

